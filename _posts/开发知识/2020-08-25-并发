---
layout:     post
title:      "并发"
subtitle:   " \"并发\""
date:       2020-08-25 18:00:00
mathjax: true
author:     "zwt"
header-img: "img/post-bg-2015.jpg"
catalog: false
tags:
    - 开发
---
* TOC
{:toc}
# 基础概念

原子性：
```
完全独立于任何其他进程运行的操作，原子操作要么全部执行，要么全部不执行。
```
有序性：
```
指令的先后执行顺序，一个明显例子就是JVM的加载：经历五个阶段 「加载、连接、初始化、使用、卸载」。这五个过程的执行顺序是一定的，但是在连接阶段，也会分为三个过程，即 「验证、准备、解析」阶段，这三个阶段的执行顺序不是确定的，通常交叉进行，在一个阶段的执行过程中会激活另一个阶段。
```
活跃性：
```
简单来说就是一件事情是否会发生
注意：如果一组线程中每个线程都在等待一个事件的发生，而这个事件只能由该组中正在等待的线程触发，这个情况会导致死锁。
```
死锁：造成死锁的原因有四个，破坏其中一个就可以破坏死锁
```
互斥：
请求与保持连接：
不剥夺条件：
循环等待：
```